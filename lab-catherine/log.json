{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-06T23:33:58.856Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-06T23:33:58.896Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-06T23:33:58.898Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-06T23:33:58.898Z"}
{"message":"Cannot read property 'toString' of undefined","stack":"TypeError: Cannot read property 'toString' of undefined\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:53:37)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-06T23:33:58.898Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-06T23:43:19.611Z"}
{"level":"info","message":"/api/notes","timestamp":"2017-12-06T23:43:19.612Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // Here, I can create my book since all test pass\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:43:19.612Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-06T23:43:19.649Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-06T23:43:19.694Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-06T23:43:19.695Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // Here, I can create my book since all test pass\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:43:19.695Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-06T23:43:19.695Z"}
{"id":"3d2c11f0-dadf-11e7-9f6b-abc108474ed8","timestamp":"2017-12-06T23:43:19.695Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-06T23:52:18.667Z"}
{"level":"info","message":"/api/notes","timestamp":"2017-12-06T23:52:18.668Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // Here, I can create my book since all test pass\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:52:18.668Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-06T23:52:18.722Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-06T23:52:18.767Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-06T23:52:18.768Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-06T23:52:18.768Z"}
{"message":"Cannot read property 'toString' of undefined","stack":"TypeError: Cannot read property 'toString' of undefined\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:52:37)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-06T23:52:18.768Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-06T23:53:22.687Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-06T23:53:22.688Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // Here, I can create my book since all test pass\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:53:22.688Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-06T23:53:22.730Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-06T23:53:22.774Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-06T23:53:22.775Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // Here, I can create my book since all test pass\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:53:22.775Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-06T23:53:22.775Z"}
{"id":"a4a2c670-dae0-11e7-8dc4-5f2d36ae5c7b","timestamp":"2017-12-06T23:53:22.775Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-06T23:55:27.829Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-06T23:55:27.830Z"}
{"level":"info","message":"(request, response) => {\n  // Here, I know that my request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // Here, I can create my book since all test pass\n  let book = new Book(request.body.title,request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:55:27.830Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-06T23:55:38.997Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-06T23:55:38.998Z"}
{"level":"info","message":"(request, response) => {\n  // Here, I know that my request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // Here, I can create my book since all test pass\n  let book = new Book(request.body.title,request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:55:38.998Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-06T23:57:41.314Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-06T23:57:41.315Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // Here, I can create my book since all test pass\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:57:41.315Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-06T23:57:41.371Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-06T23:57:41.416Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-06T23:57:41.417Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // Here, I can create my book since all test pass\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:57:41.417Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-06T23:57:41.417Z"}
{"id":"3ecc6990-dae1-11e7-8984-11802bb3bbd8","timestamp":"2017-12-06T23:57:41.417Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:07:54.070Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:07:54.071Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:07:54.071Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:07:54.109Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:07:54.152Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:07:54.153Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:07:54.153Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:07:54.154Z"}
{"id":"ac04a8a0-dae2-11e7-bd39-3983c845ded6","timestamp":"2017-12-07T00:07:54.154Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:07:54.163Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:07:54.163Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:34:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:07:54.163Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:10:32.707Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:10:32.707Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:10:32.707Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:10:32.741Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:10:32.753Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:10:32.754Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:10:32.754Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:10:32.755Z"}
{"id":"0a8d4030-dae3-11e7-b61c-cb138e52871f","timestamp":"2017-12-07T00:10:32.755Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:10:32.762Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:10:32.763Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:10:32.763Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:10:32.763Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:10:32.766Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:10:32.766Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:34:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:10:32.766Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:11:32.670Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:11:32.671Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:11:32.671Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:11:32.705Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:11:32.718Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:11:32.719Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:11:32.719Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:11:32.719Z"}
{"id":"2e4b07f0-dae3-11e7-808b-a75f0d5f1637","timestamp":"2017-12-07T00:11:32.719Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:11:32.727Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:11:32.727Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:11:32.727Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:11:32.727Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:11:32.730Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:11:32.730Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:34:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:11:32.730Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:12:45.073Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:12:45.074Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:12:45.074Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:12:45.116Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:12:45.129Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:12:45.130Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:12:45.130Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:12:45.130Z"}
{"id":"597412a0-dae3-11e7-89e0-95513271f48a","timestamp":"2017-12-07T00:12:45.130Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:12:45.139Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:12:45.139Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:12:45.139Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:12:45.140Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:12:45.142Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:12:45.142Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:34:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:12:45.142Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:18:04.100Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:18:04.100Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:18:04.101Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:18:04.136Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:18:04.187Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:18:04.188Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:18:04.189Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:18:04.189Z"}
{"id":"17a09cd0-dae4-11e7-b16f-cf8d43ef65b4","timestamp":"2017-12-07T00:18:04.189Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:18:04.198Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:18:04.198Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:18:04.198Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:18:04.198Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:18:04.200Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:18:04.201Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:18:04.201Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:25:15.543Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:25:15.544Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:25:15.544Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:25:15.550Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:28:15.503Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:28:15.504Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:28:15.504Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:28:15.510Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:28:49.474Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:28:49.476Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:28:49.476Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:28:49.485Z"}
