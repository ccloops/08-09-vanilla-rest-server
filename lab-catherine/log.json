{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-06T23:33:58.856Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-06T23:33:58.896Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-06T23:33:58.898Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-06T23:33:58.898Z"}
{"message":"Cannot read property 'toString' of undefined","stack":"TypeError: Cannot read property 'toString' of undefined\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:53:37)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-06T23:33:58.898Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-06T23:43:19.611Z"}
{"level":"info","message":"/api/notes","timestamp":"2017-12-06T23:43:19.612Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // Here, I can create my book since all test pass\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:43:19.612Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-06T23:43:19.649Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-06T23:43:19.694Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-06T23:43:19.695Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // Here, I can create my book since all test pass\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:43:19.695Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-06T23:43:19.695Z"}
{"id":"3d2c11f0-dadf-11e7-9f6b-abc108474ed8","timestamp":"2017-12-06T23:43:19.695Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-06T23:52:18.667Z"}
{"level":"info","message":"/api/notes","timestamp":"2017-12-06T23:52:18.668Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // Here, I can create my book since all test pass\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:52:18.668Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-06T23:52:18.722Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-06T23:52:18.767Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-06T23:52:18.768Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-06T23:52:18.768Z"}
{"message":"Cannot read property 'toString' of undefined","stack":"TypeError: Cannot read property 'toString' of undefined\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:52:37)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-06T23:52:18.768Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-06T23:53:22.687Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-06T23:53:22.688Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // Here, I can create my book since all test pass\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:53:22.688Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-06T23:53:22.730Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-06T23:53:22.774Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-06T23:53:22.775Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // Here, I can create my book since all test pass\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:53:22.775Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-06T23:53:22.775Z"}
{"id":"a4a2c670-dae0-11e7-8dc4-5f2d36ae5c7b","timestamp":"2017-12-06T23:53:22.775Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-06T23:55:27.829Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-06T23:55:27.830Z"}
{"level":"info","message":"(request, response) => {\n  // Here, I know that my request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // Here, I can create my book since all test pass\n  let book = new Book(request.body.title,request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:55:27.830Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-06T23:55:38.997Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-06T23:55:38.998Z"}
{"level":"info","message":"(request, response) => {\n  // Here, I know that my request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // Here, I can create my book since all test pass\n  let book = new Book(request.body.title,request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:55:38.998Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-06T23:57:41.314Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-06T23:57:41.315Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // Here, I can create my book since all test pass\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:57:41.315Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-06T23:57:41.371Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-06T23:57:41.416Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-06T23:57:41.417Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // Here, I can create my book since all test pass\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:57:41.417Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-06T23:57:41.417Z"}
{"id":"3ecc6990-dae1-11e7-8984-11802bb3bbd8","timestamp":"2017-12-06T23:57:41.417Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:07:54.070Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:07:54.071Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:07:54.071Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:07:54.109Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:07:54.152Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:07:54.153Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:07:54.153Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:07:54.154Z"}
{"id":"ac04a8a0-dae2-11e7-bd39-3983c845ded6","timestamp":"2017-12-07T00:07:54.154Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:07:54.163Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:07:54.163Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:34:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:07:54.163Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:10:32.707Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:10:32.707Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:10:32.707Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:10:32.741Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:10:32.753Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:10:32.754Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:10:32.754Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:10:32.755Z"}
{"id":"0a8d4030-dae3-11e7-b61c-cb138e52871f","timestamp":"2017-12-07T00:10:32.755Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:10:32.762Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:10:32.763Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:10:32.763Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:10:32.763Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:10:32.766Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:10:32.766Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:34:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:10:32.766Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:11:32.670Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:11:32.671Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:11:32.671Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:11:32.705Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:11:32.718Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:11:32.719Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:11:32.719Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:11:32.719Z"}
{"id":"2e4b07f0-dae3-11e7-808b-a75f0d5f1637","timestamp":"2017-12-07T00:11:32.719Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:11:32.727Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:11:32.727Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:11:32.727Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:11:32.727Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:11:32.730Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:11:32.730Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:34:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:11:32.730Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:12:45.073Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:12:45.074Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:12:45.074Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:12:45.116Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:12:45.129Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:12:45.130Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:12:45.130Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:12:45.130Z"}
{"id":"597412a0-dae3-11e7-89e0-95513271f48a","timestamp":"2017-12-07T00:12:45.130Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:12:45.139Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:12:45.139Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:12:45.139Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:12:45.140Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:12:45.142Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:12:45.142Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:34:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:12:45.142Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:18:04.100Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:18:04.100Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:18:04.101Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:18:04.136Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:18:04.187Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:18:04.188Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:18:04.189Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:18:04.189Z"}
{"id":"17a09cd0-dae4-11e7-b16f-cf8d43ef65b4","timestamp":"2017-12-07T00:18:04.189Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:18:04.198Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:18:04.198Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:18:04.198Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:18:04.198Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:18:04.200Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:18:04.201Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:18:04.201Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:25:15.543Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:25:15.544Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:25:15.544Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:25:15.550Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:28:15.503Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:28:15.504Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:28:15.504Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:28:15.510Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:28:49.474Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:28:49.476Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:28:49.476Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:28:49.485Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:33:09.972Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:33:09.973Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:33:09.973Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:33:09.973Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:36:44.445Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:36:44.445Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:36:44.445Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:38:15.607Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:38:15.607Z"}
{"message":"Unexpected token “ in JSON at position 1","stack":"SyntaxError: Unexpected token “ in JSON at position 1\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:38:15.607Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:40:36.860Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:40:36.861Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:40:36.861Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:40:41.920Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:40:41.921Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:40:41.921Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:40:41.921Z"}
{"id":"40e61310-dae7-11e7-93d2-7559fe698e88","timestamp":"2017-12-07T00:40:41.921Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:40:41.930Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:40:41.931Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:40:41.931Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:40:41.931Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:40:41.933Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:40:41.933Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:40:41.933Z"}
{"level":"error","message":"__SERVER_ERROR__ server is already off","timestamp":"2017-12-07T00:40:41.934Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:41:27.004Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:41:27.005Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:41:27.005Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:41:32.056Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:41:32.056Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:41:32.056Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:41:32.056Z"}
{"id":"5ec81180-dae7-11e7-93d2-7559fe698e88","timestamp":"2017-12-07T00:41:32.056Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:41:32.065Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:41:32.066Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:41:32.066Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:41:32.066Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:41:32.068Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:41:32.068Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:41:32.068Z"}
{"level":"error","message":"__SERVER_ERROR__ server is already off","timestamp":"2017-12-07T00:41:32.069Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:42:37.371Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:42:37.371Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:42:37.371Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:42:42.425Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:42:42.425Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:42:42.425Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:42:42.425Z"}
{"id":"88b98690-dae7-11e7-93d2-7559fe698e88","timestamp":"2017-12-07T00:42:42.425Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:42:42.435Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:42:42.435Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:42:42.435Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:42:42.435Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:42:42.437Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:42:42.437Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:42:42.437Z"}
{"level":"error","message":"__SERVER_ERROR__ server is already off","timestamp":"2017-12-07T00:42:42.438Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:44:48.760Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:44:48.761Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:44:48.761Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:44:48.797Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:44:48.810Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:44:48.811Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:44:48.811Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:44:48.812Z"}
{"id":"d40e7fb0-dae7-11e7-b42a-6f2871ca2543","timestamp":"2017-12-07T00:44:48.812Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:44:48.819Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:44:48.820Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:44:48.820Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:44:48.820Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:44:48.822Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:44:48.823Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:44:48.823Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:45:19.145Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:45:19.145Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:45:19.145Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:45:19.185Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:45:19.198Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:45:19.199Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:45:19.199Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:45:19.199Z"}
{"id":"e62b56f0-dae7-11e7-9637-110bf53987e9","timestamp":"2017-12-07T00:45:19.199Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:45:19.207Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:45:19.208Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:45:19.208Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:45:19.208Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:45:19.210Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:45:19.211Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:45:19.211Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:46:48.094Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:46:48.095Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:46:48.095Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:46:48.100Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:46:54.932Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:46:54.933Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:46:54.933Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:46:54.975Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:46:54.988Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:46:54.989Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:46:54.989Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:46:54.989Z"}
{"id":"1f43bbd0-dae8-11e7-869f-634634aaf79a","timestamp":"2017-12-07T00:46:54.989Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:46:54.997Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:46:54.997Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:46:54.997Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:46:54.997Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:46:55.000Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:46:55.000Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:46:55.000Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:59:54.350Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:59:54.351Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:59:54.351Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:59:54.391Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:59:54.434Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:59:54.435Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:59:54.435Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:59:54.436Z"}
{"id":"efd9e840-dae9-11e7-a70a-b304672f7017","timestamp":"2017-12-07T00:59:54.436Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:59:54.443Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:59:54.443Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:59:54.444Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:59:54.444Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:59:54.446Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:59:54.446Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:59:54.446Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:12:20.202Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:12:20.203Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:12:20.203Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:12:20.238Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:12:20.250Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:12:20.251Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:12:20.251Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:12:20.252Z"}
{"id":"ac643eb0-daeb-11e7-aaad-cd7d321540c9","timestamp":"2017-12-07T01:12:20.252Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:12:20.259Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:12:20.260Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:12:20.260Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:12:20.260Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:12:20.262Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:12:20.262Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:12:20.262Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:24:07.646Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:24:07.647Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:24:07.647Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:24:07.652Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:24:24.482Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:24:24.484Z"}
{"message":"Unexpected token “ in JSON at position 1","stack":"SyntaxError: Unexpected token “ in JSON at position 1\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:24:24.484Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:24:45.291Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:24:45.291Z"}
{"message":"Unexpected token “ in JSON at position 1","stack":"SyntaxError: Unexpected token “ in JSON at position 1\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:24:45.291Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:25:25.878Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:25:25.879Z"}
{"message":"Unexpected token “ in JSON at position 1","stack":"SyntaxError: Unexpected token “ in JSON at position 1\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:25:25.879Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:26:00.730Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:26:00.730Z"}
{"message":"Unexpected token “ in JSON at position 1","stack":"SyntaxError: Unexpected token “ in JSON at position 1\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:26:00.730Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:27:01.172Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:27:01.172Z"}
{"message":"Unexpected token “ in JSON at position 1","stack":"SyntaxError: Unexpected token “ in JSON at position 1\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:27:01.172Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:28:16.219Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:28:16.219Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:28:16.219Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:28:16.220Z"}
{"id":"e63189c0-daed-11e7-b1c5-c5d9117e46b9","timestamp":"2017-12-07T01:28:16.220Z","title":"Harry Potter","author":"Catherine","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:30:00.862Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:30:00.863Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:30:00.863Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:30:00.863Z"}
{"id":"2490caf0-daee-11e7-b1c5-c5d9117e46b9","timestamp":"2017-12-07T01:30:00.863Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:30:37.522Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:30:37.523Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:30:37.523Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:30:37.565Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:30:37.611Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:30:37.612Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:30:37.612Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:30:37.612Z"}
{"id":"3a783ec0-daee-11e7-849c-5b86b9612dc2","timestamp":"2017-12-07T01:30:37.612Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:30:37.621Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:30:37.621Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:30:37.621Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:30:37.621Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:30:37.623Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:30:37.624Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:30:37.624Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:32:02.259Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:32:02.260Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  console.log(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:32:02.260Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:32:02.266Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:32:35.095Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:32:35.096Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  console.log(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:32:35.096Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:32:35.098Z"}
{"id":"807f0890-daee-11e7-8cb2-5b2a7e64fbc4","timestamp":"2017-12-07T01:32:35.098Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:32:54.956Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:32:54.957Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:32:54.957Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:32:55.020Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:32:55.073Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:32:55.074Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:32:55.074Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:32:55.077Z"}
{"id":"8c676f30-daee-11e7-a217-0d6e2e987cba","timestamp":"2017-12-07T01:32:55.077Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:32:55.087Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:32:55.087Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:32:55.087Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:32:55.087Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:32:55.090Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:32:55.090Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:32:55.090Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:34:52.131Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:34:52.132Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  console.log(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:34:52.132Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:34:52.132Z"}
{"level":"info","message":"/api/books?id=${id}","timestamp":"2017-12-07T01:34:52.132Z"}
{"level":"info","message":"(request, response) => {\n  sendJSON(request.body);\n}","timestamp":"2017-12-07T01:34:52.132Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:34:52.138Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:34:55.829Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:34:55.830Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:34:55.830Z"}
{"message":"Cannot read property 'toString' of undefined","stack":"TypeError: Cannot read property 'toString' of undefined\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:39)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T01:34:55.831Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:40:53.841Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:40:53.842Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:40:53.842Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:40:53.842Z"}
{"level":"info","message":"/api/books?id=${id}","timestamp":"2017-12-07T01:40:53.842Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  sendJSON(request.body);\n}","timestamp":"2017-12-07T01:40:53.842Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:40:53.883Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:40:53.927Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:40:53.928Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:40:53.928Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:40:53.930Z"}
{"id":"a9d29a80-daef-11e7-bbff-6b0da682fef5","timestamp":"2017-12-07T01:40:53.930Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:40:53.938Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:40:53.939Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:40:53.939Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:40:53.939Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:40:53.941Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:40:53.941Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:40:53.941Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:40:53.943Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:40:53.943Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:40:53.943Z"}
{"message":"Cannot read property 'toString' of undefined","stack":"TypeError: Cannot read property 'toString' of undefined\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:37)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T01:40:53.943Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:43:05.021Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:43:05.022Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:43:05.022Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:43:05.022Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:43:05.022Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T01:43:05.022Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:43:05.063Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:43:05.107Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:43:05.108Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:43:05.108Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:43:05.110Z"}
{"id":"f8033c50-daef-11e7-93bb-970f241fc081","timestamp":"2017-12-07T01:43:05.110Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:43:05.119Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:43:05.119Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:43:05.119Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:43:05.119Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:43:05.121Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:43:05.121Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:43:05.121Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:43:05.123Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:43:05.123Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T01:43:05.123Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:43:05.123Z"}
[{"id":"f8033c50-daef-11e7-93bb-970f241fc081","timestamp":"2017-12-07T01:43:05.109Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:43:24.605Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:43:24.606Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:43:24.606Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:43:24.606Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:43:24.606Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T01:43:24.606Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:43:24.648Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:43:24.694Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:43:24.695Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:43:24.695Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:43:24.697Z"}
{"id":"03afd270-daf0-11e7-adda-75ed14914844","timestamp":"2017-12-07T01:43:24.697Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:43:24.705Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:43:24.705Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:43:24.705Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:43:24.705Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:43:24.707Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:43:24.708Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:43:24.708Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:43:24.709Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:43:24.709Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T01:43:24.709Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:43:24.710Z"}
[{"id":"03afd270-daf0-11e7-adda-75ed14914844","timestamp":"2017-12-07T01:43:24.695Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:44:46.528Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:44:46.528Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:44:46.528Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:44:46.528Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:44:46.529Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(response); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T01:44:46.529Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:44:46.576Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:44:46.624Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:44:46.625Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:44:46.625Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:44:46.627Z"}
{"id":"34855910-daf0-11e7-8ee8-a1a845b0bb87","timestamp":"2017-12-07T01:44:46.627Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:44:46.636Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:44:46.637Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:44:46.637Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:44:46.637Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:44:46.639Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:44:46.639Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:44:46.640Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:44:46.642Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:44:46.642Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(response); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T01:44:46.642Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:44:46.645Z"}
[{"id":"34855910-daf0-11e7-8ee8-a1a845b0bb87","timestamp":"2017-12-07T01:44:46.625Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:45:35.247Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:45:35.248Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:45:35.248Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:45:35.248Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:45:35.248Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  return;\n}","timestamp":"2017-12-07T01:45:35.248Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:45:35.290Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:45:35.334Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:45:35.335Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:45:35.335Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:45:35.337Z"}
{"id":"518e0e80-daf0-11e7-93f7-c5c324a16543","timestamp":"2017-12-07T01:45:35.337Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:45:35.345Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:45:35.346Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:45:35.346Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:45:35.346Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:45:35.348Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:45:35.348Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:45:35.348Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:45:35.350Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:45:35.350Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  return;\n}","timestamp":"2017-12-07T01:45:35.350Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:45:35.351Z"}
[{"id":"518e0e80-daf0-11e7-93f7-c5c324a16543","timestamp":"2017-12-07T01:45:35.336Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:48:00.938Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:48:00.938Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:48:00.939Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:48:00.939Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:48:00.939Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response.body[0]['title'], 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  return;\n}","timestamp":"2017-12-07T01:48:00.939Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:48:00.981Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:48:01.026Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:48:01.028Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:48:01.028Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:48:01.030Z"}
{"id":"a864e440-daf0-11e7-9ffe-c5b0968404e7","timestamp":"2017-12-07T01:48:01.030Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:48:01.038Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:48:01.038Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:48:01.038Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:48:01.038Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:48:01.040Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:48:01.040Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:48:01.040Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:48:01.042Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:48:01.042Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response.body[0]['title'], 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  return;\n}","timestamp":"2017-12-07T01:48:01.042Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:48:01.043Z"}
{"message":"Cannot read property '0' of undefined","stack":"TypeError: Cannot read property '0' of undefined\n    at Object.<anonymous>.router.get (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:48:25)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:52:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T01:48:01.043Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:48:39.306Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:48:39.307Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:48:39.307Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:48:39.307Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:48:39.307Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response.body[0]['title'], 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  console.log(response.body[0]['title']); /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n  return;\n}","timestamp":"2017-12-07T01:48:39.307Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:48:39.349Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:48:39.395Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:48:39.396Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:48:39.396Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:48:39.398Z"}
{"id":"bf436240-daf0-11e7-afa3-53046edba878","timestamp":"2017-12-07T01:48:39.398Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:48:39.406Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:48:39.406Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:48:39.406Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:48:39.407Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:48:39.409Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:48:39.409Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:48:39.409Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:48:39.411Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:48:39.411Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response.body[0]['title'], 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  console.log(response.body[0]['title']); /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n  return;\n}","timestamp":"2017-12-07T01:48:39.411Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:48:39.411Z"}
{"message":"Cannot read property '0' of undefined","stack":"TypeError: Cannot read property '0' of undefined\n    at Object.<anonymous>.router.get (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:48:25)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:52:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T01:48:39.411Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:49:05.794Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:49:05.794Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:49:05.795Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:49:05.795Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:49:05.795Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response.body[0]['title'], 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  console.log(response.body[0].title); /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n  return;\n}","timestamp":"2017-12-07T01:49:05.795Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:49:05.838Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:49:05.883Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:49:05.884Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:49:05.885Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:49:05.886Z"}
{"id":"cf0d48d0-daf0-11e7-8b22-0192bb817d56","timestamp":"2017-12-07T01:49:05.886Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:49:05.895Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:49:05.895Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:49:05.895Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:49:05.896Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:49:05.898Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:49:05.898Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:49:05.898Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:49:05.900Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:49:05.900Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response.body[0]['title'], 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  console.log(response.body[0].title); /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n  return;\n}","timestamp":"2017-12-07T01:49:05.900Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:49:05.900Z"}
{"message":"Cannot read property '0' of undefined","stack":"TypeError: Cannot read property '0' of undefined\n    at Object.<anonymous>.router.get (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:48:25)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:52:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T01:49:05.900Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:49:43.054Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:49:43.055Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:49:43.055Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:49:43.055Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:49:43.055Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response.body[0].title, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  console.log(response.body[0].title); /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n  return;\n}","timestamp":"2017-12-07T01:49:43.055Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:49:43.101Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:49:43.145Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:49:43.147Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:49:43.147Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:49:43.148Z"}
{"id":"e54303b0-daf0-11e7-b64b-fbc2fac7397f","timestamp":"2017-12-07T01:49:43.149Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:49:43.157Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:49:43.157Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:49:43.157Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:49:43.157Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:49:43.159Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:49:43.160Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:49:43.160Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:49:43.161Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:49:43.161Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response.body[0].title, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  console.log(response.body[0].title); /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n  return;\n}","timestamp":"2017-12-07T01:49:43.161Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:49:43.162Z"}
{"message":"Cannot read property '0' of undefined","stack":"TypeError: Cannot read property '0' of undefined\n    at Object.<anonymous>.router.get (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:48:25)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:52:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T01:49:43.162Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:50:01.620Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:50:01.621Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:50:01.621Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:50:01.621Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:50:01.621Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response.body[0].title, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  console.log('title', response.body[0].title); /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n  return;\n}","timestamp":"2017-12-07T01:50:01.621Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:50:01.666Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:50:01.713Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:50:01.714Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:50:01.714Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:50:01.716Z"}
{"id":"f0544430-daf0-11e7-87d1-ad78e10bd84c","timestamp":"2017-12-07T01:50:01.716Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:50:01.725Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:50:01.725Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:50:01.725Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:50:01.725Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:50:01.727Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:50:01.728Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:50:01.728Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:50:01.729Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:50:01.729Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response.body[0].title, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  console.log('title', response.body[0].title); /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n  return;\n}","timestamp":"2017-12-07T01:50:01.730Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:50:01.730Z"}
{"message":"Cannot read property '0' of undefined","stack":"TypeError: Cannot read property '0' of undefined\n    at Object.<anonymous>.router.get (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:48:25)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:52:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T01:50:01.730Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:51:04.705Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:51:04.706Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:51:04.706Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:51:04.706Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:51:04.706Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books);\n  // console.log('title', response.body[0].title);\n  /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;return;\n}","timestamp":"2017-12-07T01:51:04.706Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:51:04.747Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:51:04.792Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:51:04.794Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:51:04.794Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:51:04.795Z"}
{"id":"15ed5ba0-daf1-11e7-8e97-c159dc6fe46f","timestamp":"2017-12-07T01:51:04.795Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:51:04.803Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:51:04.804Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:51:04.804Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:51:04.804Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:51:04.806Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:51:04.806Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:51:04.806Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:51:04.808Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:51:04.808Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books);\n  // console.log('title', response.body[0].title);\n  /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;return;\n}","timestamp":"2017-12-07T01:51:04.808Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:51:04.809Z"}
[{"id":"15ed5ba0-daf1-11e7-8e97-c159dc6fe46f","timestamp":"2017-12-07T01:51:04.794Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:51:56.988Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:51:56.988Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:51:56.988Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:51:56.988Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:51:56.989Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  return;\n}","timestamp":"2017-12-07T01:51:56.989Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:51:57.027Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:51:57.039Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:51:57.040Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:51:57.040Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:51:57.042Z"}
{"id":"35119e10-daf1-11e7-a71d-973b87484073","timestamp":"2017-12-07T01:51:57.042Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:51:57.050Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:51:57.050Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:51:57.050Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:51:57.050Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:51:57.052Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:51:57.053Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:51:57.053Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:51:57.054Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:51:57.055Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  return;\n}","timestamp":"2017-12-07T01:51:57.055Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:51:57.055Z"}
[{"id":"35119e10-daf1-11e7-a71d-973b87484073","timestamp":"2017-12-07T01:51:57.041Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:52:47.021Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:52:47.022Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:52:47.022Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:52:47.022Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:52:47.022Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  return;\n}","timestamp":"2017-12-07T01:52:47.022Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:52:47.061Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:52:47.074Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:52:47.075Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:52:47.075Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:52:47.076Z"}
{"id":"52e43330-daf1-11e7-8c8b-892558f1fae1","timestamp":"2017-12-07T01:52:47.076Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:52:47.084Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:52:47.085Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:52:47.085Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:52:47.085Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:52:47.087Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:52:47.087Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:52:47.087Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:52:47.089Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:52:47.089Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  return;\n}","timestamp":"2017-12-07T01:52:47.089Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:52:47.089Z"}
[{"id":"52e43330-daf1-11e7-8c8b-892558f1fae1","timestamp":"2017-12-07T01:52:47.075Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:53:31.444Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:53:31.445Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:53:31.445Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:53:31.445Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:53:31.445Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  // console.log(books);\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  return;\n}","timestamp":"2017-12-07T01:53:31.445Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:53:31.488Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:53:31.535Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:53:31.536Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:53:31.536Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:53:31.538Z"}
{"id":"6d646900-daf1-11e7-812a-bfcea23874bc","timestamp":"2017-12-07T01:53:31.538Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:53:31.546Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:53:31.547Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:53:31.547Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:53:31.547Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:53:31.549Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:53:31.549Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:53:31.549Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:53:31.551Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:53:31.551Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  // console.log(books);\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  return;\n}","timestamp":"2017-12-07T01:53:31.551Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:53:31.552Z"}
[{"id":"6d646900-daf1-11e7-812a-bfcea23874bc","timestamp":"2017-12-07T01:53:31.536Z","title":"Harry Potter","author":"J.K. Rowling"}]
